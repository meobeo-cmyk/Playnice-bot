import discord
from discord.ext import commands
import asyncio
import os
import logging
from datetime import datetime, timedelta
from config import Config
from moderation import ModerationService
from database import ViolationDatabase
from utils import setup_logging

# Setup logging
setup_logging()
logger = logging.getLogger(__name__)

class ModerationBot(commands.Bot):
    def __init__(self):
        intents = discord.Intents.default()
        intents.message_content = True
        
        super().__init__(
            command_prefix='!',
            intents=intents,
            help_command=None
        )
        
        self.moderation_service = ModerationService()
        self.violation_db = ViolationDatabase()
        
    async def on_ready(self):
        logger.info(f'{self.user} ƒë√£ ƒëƒÉng nh·∫≠p v√† s·∫µn s√†ng!')
        try:
            synced = await self.tree.sync()
            logger.info(f'ƒê√£ ƒë·ªìng b·ªô {len(synced)} slash command(s)')
        except Exception as e:
            logger.error(f'L·ªói khi ƒë·ªìng b·ªô commands: {e}')
    
    async def on_message(self, message):
        # Ignore bot messages
        if message.author.bot:
            return
        
        # Check if user has admin permissions
        if message.author.guild_permissions.administrator:
            return
        
        try:
            # Check for violations
            violation_result = await self.moderation_service.check_message(message.content)
            
            if violation_result['is_violation']:
                await self.handle_violation(message, violation_result)
            
            # Check for Discord invite links
            if self.moderation_service.has_discord_invite(message.content):
                await self.handle_discord_invite(message)
                
        except Exception as e:
            logger.error(f'L·ªói khi ki·ªÉm tra tin nh·∫Øn: {e}')
    
    async def handle_violation(self, message, violation_result):
        """Handle message violation by deleting and muting user"""
        try:
            # Delete the message
            await message.delete()
            
            # Mute the user for 10 minutes
            mute_duration = timedelta(minutes=10)
            await message.author.timeout(mute_duration, reason=f"Vi ph·∫°m: {violation_result['violation_type']}")
            
            # Log the violation
            self.violation_db.add_violation(
                user_id=message.author.id,
                username=str(message.author),
                violation_type=violation_result['violation_type'],
                message_content=message.content,
                channel_id=message.channel.id,
                guild_id=message.guild.id
            )
            
            # Send notification to user
            try:
                embed = discord.Embed(
                    title="‚ö†Ô∏è C·∫£nh b√°o vi ph·∫°m",
                    description=f"Tin nh·∫Øn c·ªßa b·∫°n ƒë√£ b·ªã x√≥a do vi ph·∫°m quy ƒë·ªãnh: **{violation_result['violation_type']}**",
                    color=discord.Color.red(),
                    timestamp=datetime.utcnow()
                )
                embed.add_field(
                    name="Th·ªùi gian mute",
                    value="10 ph√∫t",
                    inline=True
                )
                embed.add_field(
                    name="L√Ω do",
                    value=violation_result.get('reason', 'N·ªôi dung kh√¥ng ph√π h·ª£p'),
                    inline=False
                )
                await message.author.send(embed=embed)
            except discord.Forbidden:
                logger.warning(f"Kh√¥ng th·ªÉ g·ª≠i DM cho {message.author}")
            
            logger.info(f"ƒê√£ x·ª≠ l√Ω vi ph·∫°m t·ª´ {message.author} trong {message.guild.name}")
            
        except Exception as e:
            logger.error(f"L·ªói khi x·ª≠ l√Ω vi ph·∫°m: {e}")
    
    async def handle_discord_invite(self, message):
        """Handle Discord invite links"""
        try:
            # Delete the message
            await message.delete()
            
            # Mute user for 5 minutes
            mute_duration = timedelta(minutes=5)
            await message.author.timeout(mute_duration, reason="Chia s·∫ª link Discord kh√¥ng ƒë∆∞·ª£c ph√©p")
            
            # Log the violation
            self.violation_db.add_violation(
                user_id=message.author.id,
                username=str(message.author),
                violation_type="Discord Invite Link",
                message_content=message.content,
                channel_id=message.channel.id,
                guild_id=message.guild.id
            )
            
            # Send notification
            try:
                embed = discord.Embed(
                    title="üîó Link kh√¥ng ƒë∆∞·ª£c ph√©p",
                    description="Tin nh·∫Øn ch·ª©a link Discord invite ƒë√£ b·ªã x√≥a",
                    color=discord.Color.orange(),
                    timestamp=datetime.utcnow()
                )
                await message.author.send(embed=embed)
            except discord.Forbidden:
                pass
                
            logger.info(f"ƒê√£ x√≥a Discord invite t·ª´ {message.author}")
            
        except Exception as e:
            logger.error(f"L·ªói khi x·ª≠ l√Ω Discord invite: {e}")

# Create bot instance
bot = ModerationBot()

@bot.tree.command(name="report", description="Xem b√°o c√°o vi ph·∫°m trong 1 tu·∫ßn qua (ch·ªâ d√†nh cho admin)")
async def report_command(interaction: discord.Interaction):
    # Check if user is admin
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!", ephemeral=True)
        return
    
    try:
        # Get violations from the past week
        violations = bot.violation_db.get_violations_last_week(interaction.guild.id)
        
        if not violations:
            embed = discord.Embed(
                title="üìä B√°o c√°o vi ph·∫°m (7 ng√†y qua)",
                description="Kh√¥ng c√≥ vi ph·∫°m n√†o trong tu·∫ßn qua.",
                color=discord.Color.green(),
                timestamp=datetime.utcnow()
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
        
        # Create report embed
        embed = discord.Embed(
            title="üìä B√°o c√°o vi ph·∫°m (7 ng√†y qua)",
            description=f"T·ªïng c·ªông: **{len(violations)}** vi ph·∫°m",
            color=discord.Color.red(),
            timestamp=datetime.utcnow()
        )
        
        # Group violations by type
        violation_types = {}
        user_violations = {}
        
        for violation in violations:
            v_type = violation['violation_type']
            user_id = violation['user_id']
            username = violation['username']
            
            violation_types[v_type] = violation_types.get(v_type, 0) + 1
            
            if user_id not in user_violations:
                user_violations[user_id] = {'username': username, 'count': 0}
            user_violations[user_id]['count'] += 1
        
        # Add violation types field
        types_text = '\n'.join([f"‚Ä¢ {vtype}: {count}" for vtype, count in violation_types.items()])
        embed.add_field(
            name="üìã Lo·∫°i vi ph·∫°m",
            value=types_text if types_text else "Kh√¥ng c√≥",
            inline=True
        )
        
        # Add top violators field
        top_violators = sorted(user_violations.items(), key=lambda x: x[1]['count'], reverse=True)[:5]
        violators_text = '\n'.join([
            f"‚Ä¢ {data['username']}: {data['count']} l·∫ßn"
            for user_id, data in top_violators
        ])
        embed.add_field(
            name="üë• Top vi ph·∫°m",
            value=violators_text if violators_text else "Kh√¥ng c√≥",
            inline=True
        )
        
        embed.set_footer(text="D·ªØ li·ªáu t·ª´ 7 ng√†y qua")
        
        await interaction.response.send_message(embed=embed, ephemeral=True)
        
    except Exception as e:
        logger.error(f"L·ªói khi t·∫°o b√°o c√°o: {e}")
        await interaction.response.send_message("‚ùå C√≥ l·ªói x·∫£y ra khi t·∫°o b√°o c√°o!", ephemeral=True)

@bot.tree.command(name="clear_violations", description="X√≥a t·∫•t c·∫£ d·ªØ li·ªáu vi ph·∫°m (ch·ªâ d√†nh cho admin)")
async def clear_violations_command(interaction: discord.Interaction):
    if not interaction.user.guild_permissions.administrator:
        await interaction.response.send_message("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠ d·ª•ng l·ªánh n√†y!", ephemeral=True)
        return
    
    try:
        bot.violation_db.clear_violations(interaction.guild.id)
        embed = discord.Embed(
            title="üóëÔ∏è ƒê√£ x√≥a d·ªØ li·ªáu",
            description="T·∫•t c·∫£ d·ªØ li·ªáu vi ph·∫°m ƒë√£ ƒë∆∞·ª£c x√≥a.",
            color=discord.Color.green(),
            timestamp=datetime.utcnow()
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)
    except Exception as e:
        logger.error(f"L·ªói khi x√≥a violations: {e}")
        await interaction.response.send_message("‚ùå C√≥ l·ªói x·∫£y ra!", ephemeral=True)

if __name__ == "__main__":
    # Get bot token from environment
    token = os.getenv("DISCORD_BOT_TOKEN")
    if not token:
        logger.error("DISCORD_BOT_TOKEN kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y trong environment variables!")
        exit(1)
    
    try:
        bot.run(token)
    except Exception as e:
        logger.error(f"L·ªói khi ch·∫°y bot: {e}")
